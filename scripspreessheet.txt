var sheetName = 'Sheet1'
var scriptProp = PropertiesService.getScriptProperties()

function intialSetup () {
  var activeSpreadsheet = SpreadsheetApp.getActiveSpreadsheet()
  scriptProp.setProperty('key', activeSpreadsheet.getId())
// ID_FOLDER  ganti dengan id folder tujuan
  scriptProp.setProperty('folder', '1HlgclEJQUTVd7uxf3RDmBcPo6XAabLrS')
}

function doPost (e) {
  var lock = LockService.getScriptLock()
  lock.tryLock(10000)

  try {
    // Simpan file upload pertama
    var kk = e.parameter.foto_kk
    var base64 = kk.replace(/^data.*;base64,/gim, "")
    var mimetype = kk.match(/(?<=data:).*?(?=;)/gim)?.[0]
    var decode = Utilities.base64Decode(base64, Utilities.Charset.UTF_8)
   // parameter ke 3 nama filenya, itu yang perlu diubah 
    var blob = Utilities.newBlob(decode, mimetype, `${e.parameter.nama}_${Date.now()}.${mimetype.split('/')[1]}`)
    var file = DriveApp.getFolderById(scriptProp.getProperty('folder')).createFile(blob)
    e.parameter.foto_kk = file.getUrl()

 // Simpan file upload kedua
    var ktp = e.parameter.foto_ktp
    var base64 = ktp.replace(/^data.*;base64,/gim, "")
    var mimetype = ktp.match(/(?<=data:).*?(?=;)/gim)?.[0]
    var decode = Utilities.base64Decode(base64, Utilities.Charset.UTF_8)
   // parameter ke 3 nama filenya, itu yang perlu diubah 
  var blob = Utilities.newBlob(decode, mimetype, `${e.parameter.nama}_${Date.now()}.${mimetype.split('/')[1]}`)
    var file = DriveApp.getFolderById(scriptProp.getProperty('folder')).createFile(blob)
    e.parameter.foto_ktp = file.getUrl()


    
    var doc = SpreadsheetApp.openById(scriptProp.getProperty('key'))
    var sheet = doc.getSheetByName(sheetName)

    var headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0]
    var nextRow = sheet.getLastRow() + 1

    var newRow = headers.map(function(header) {
      return header === 'timestamp' ? new Date() : e.parameter[header]
    })

    sheet.getRange(nextRow, 1, 1, newRow.length).setValues([newRow])

    return ContentService
      .createTextOutput(JSON.stringify({ 'result': 'success', 'row': nextRow }))
      .setMimeType(ContentService.MimeType.JSON)
  }
  catch (e) {
    console.log(e)
    return ContentService
      .createTextOutput(JSON.stringify({ 'result': 'error', 'error': e.stack }))
      .setMimeType(ContentService.MimeType.JSON)
  }

  finally {
    lock.releaseLock()
  }
}
